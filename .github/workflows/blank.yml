# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main", "feature_cicd" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_and_test_text_cleaner:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checking out
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: build and test python
        working-directory: ./backend/pdf
        run: |
          docker build -t textcleaner .
          docker run -d textcleaner pytest testing/
  
  build_and_test_java_services:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: build and test pdf aggregator
        working-directory: ./backend/pdfConverter
        run: |
          docker build -t pdfconverter . 
          docker run -it --rm --name springboot-test pdfconverter ./mvnw test
      
      - name: build and test json resume
        working-directory: ./backend/jsonResume
        run: |
          docker build -t jsonresume . 
          docker run -it --rm --name springboot-test jsonresume ./mvnw test
  
  build_and_test_frontend:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: build and test frontend
        working-directory: /frontend/cvwizard
        run: |
          docker build -t frontend -f Dockerfile.build .
          docker build -t test -f Dockerfile.test .

  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: install ssh
        run: sudo apt-get install -y ssh

      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ../private.key
          sudo chmod 600 ../private.key
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
        shell: bash
        env:
          SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
          SSH_KNOWN_HOSTS: ${{secrets.SSH_KNOWN_HOSTS}}
          SSH_KEY_PATH: ${{ github.workspace }}/../private.key


      - name: Deploy to On-Premises Machine
        run: |
          ssh -i $SSH_KEY_PATH januszsoft@januszsoft.pl; cd /home/januszsoft/cvizard; ./deploy.sh
