version: "2.19.1"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    container_name: zookeeper

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    container_name: kafka

  mongo:
    image: mongo
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: "root"
      MONGO_INITDB_ROOT_PASSWORD: "example"
      MONGO_INITDB_DATABASE: cvizard
    container_name: mongo

  pdfreader:
    build: ./backend/pdfReader
    command: uvicorn main:app --reload --workers 1 --host 0.0.0.0 --port 8081
    volumes:
      - ./backend/pdfReader:/app
    ports:
      - 8081:8081
    depends_on:
      - kafka
    environment:
      - PDF_TEXT_TOPIC=pdf-text
      - BOOTSTRAP_SERVERS=kafka:29092
    container_name: pdfreader

  textcleaner:
    build: ./backend/textCleaner
    command: python3 main.py
    volumes:
      - ./backend/textCleaner:/app
    ports:
      - 8082:8082
    depends_on:
      - kafka
    environment:
      - PDF_TEXT_TOPIC=pdf-text
      - CLEANED_TEXT_TOPIC=cleaned-text
      - BOOTSTRAP_SERVERS=kafka:29092
    container_name: textcleaner

  # frontend:
  #   build:
  #     context: ./frontend/cvizard
  #     dockerfile: Dockerfile.dev
  #   ports:
  #     - '5173:5173'
  #   depends_on:
  #     - kafka
  #   container_name: frontend

  frontend:
    build:
      context: ./frontend/cvizard
      dockerfile: Dockerfile.prod
    ports:
      - 443:443
      - 80:80
    depends_on:
      - kafka
    container_name: frontend

  apigateway:
    build:
      context: ./backend/apigateway
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    depends_on:
      - kafka
    container_name: apigateway

  pdfcreator:
    build:
      context: ./backend/pdfcreator
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    depends_on:
      - kafka
      - mongo
    container_name: pdfcreator

  converter:
    build:
      context: ./backend/converter
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    depends_on:
      - kafka
      - mongo
    container_name: converter
    environment:
      - SETTINGS_KAFKA_TOPIC_CLEANED-TEXT=${TOPIC_CLEANED_TEXT}
      - SETTINGS_GPT-API-KEY=${GPT_API_KEY}
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:29092
      - SPRING_DATA_MONGODB_HOST=mongo
